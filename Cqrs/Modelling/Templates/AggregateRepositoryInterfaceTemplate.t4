<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var steroTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
if (!string.IsNullOrWhiteSpace(baseClass))
	baseClass = ", " + baseClass;

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;
using Cqrs.Repositories;
using uSure.Domain.Factories;
using <#= classNamespace #>.Repositories.Queries.Strategies;

namespace <#= classNamespace #>.Repositories
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	public partial interface I<#= className #>Repository : <#= baseClass #>IRepository<<#= className #>QueryStrategy, Entities.<#= className #>>
	{
	}
}
<#+
	protected override bool AppliesToElement()
	{
		bool shouldGenerateCodeForElement = ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "AggregateRoot");
		if (!shouldGenerateCodeForElement)
		return false;

		var steroTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
		return steroTypeProperties.PropertyInstances
			.Any(property => property.Name == "BuildRepository" && property.Value == "true");
	}
#>