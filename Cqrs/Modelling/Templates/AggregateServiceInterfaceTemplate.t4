<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var steroTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
if (!string.IsNullOrWhiteSpace(baseClass))
	baseClass = ": " + baseClass;

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ServiceModel;

namespace <#= classNamespace #>
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	[ServiceContract(Namespace = "http://usure.co.nz/<#= className #>")]
	public partial interface I<#= className #>Service <#= baseClass #>
	{
<#
		// Auto Create Method
		bool buildCreatedEvent = steroTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildCreateCommand")
			.Value == "true";

		if (buildCreatedEvent)
		{
#>

		/// <summary>
		/// Create a new instance of the <see cref="Entities.<#= className #>"/>
		/// </summary>
		[OperationContract]
		IServiceResponseWithResultData<Entities.<#= className #>> Create<#= className #>(IServiceRequest<string, Entities.<#= className #>> serviceRequest);
<#
		}
#>
<#
		// Auto Update Method
		bool buildUpdatedEvent = steroTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildUpdateCommand")
			.Value == "true";

		if (buildUpdatedEvent)
		{
#>

		/// <summary>
		/// Update an existing instance of the <see cref="Entities.<#= className #>"/>
		/// </summary>
		IServiceResponseWithResultData<Entities.<#= className #>> Update<#= className #>(IServiceRequest<string, Entities.<#= className #>> serviceRequest);
<#
		}
#>
<#
		// Auto Delete Method
		bool buildDeletedEvent = steroTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildDeleteCommand")
			.Value == "true";

		if (buildDeletedEvent)
		{
#>

		/// <summary>
		/// Logically delete an existing instance of the <see cref="Entities.<#= className #>"/>
		/// </summary>
		IServiceResponseWithResultData<Entities.<#= className #>> Delete<#= className #>(IServiceRequest<string, Entities.<#= className #>> serviceRequest);
<#
		}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "AggregateRoot");
	}
#>