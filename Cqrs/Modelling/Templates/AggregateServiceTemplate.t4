<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var steroTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
if (!string.IsNullOrWhiteSpace(baseClass))
	baseClass = ": " + baseClass;

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;
using Cqrs.Commands;
using Cqrs.Repositories.Queries;
using uSure.Domain.Services;
using <#= classNamespace #>.Commands;
using <#= classNamespace #>.Repositories;

namespace <#= classNamespace #>.Services
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	<#= GetDataContractAttribute(this.Element) #>
	public partial class <#= className #>Service <#= baseClass #>
	{
		protected ICommandSender CommandSender { get; private set; }

		protected IUnitOfWorkService UnitOfWorkService { get; private set; }

		protected <#= className #>Repository <#= className #>Repository { get; private set; }

		protected IQueryFactory QueryFactory { get; private set; }

		public <#= className #>Service(ICommandSender commandSender, IUnitOfWorkService unitOfWorkService, IQueryFactory queryFactory, <#= className #>Repository <#= GetLowercaseFirstCharacter(className) #>Repository)
		{
			CommandSender = commandSender;
			UnitOfWorkService = unitOfWorkService;
			<#= className #>Repository = <#= GetLowercaseFirstCharacter(className) #>Repository;
			QueryFactory = queryFactory;
		}

<#
		// Auto Create Method
		bool buildCreatedEvent = steroTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildCreateServiceMethod")
			.Value == "true";

		if (buildCreatedEvent)
		{
#>
		/// <summary>
		/// Create a new instance of the <see cref="Entities.<#= className #>"/>
		/// </summary>
		[OperationContract]
		public IServiceResponseWithResultData<Entities.<#= className #>> Create<#= className #>(IServiceRequest<string, Entities.<#= className #>> serviceRequest)
		{
			UnitOfWorkService.SetCommitter(this);
			Entities.<#= className #> item = serviceRequest.Data;
			item.Rsn = Guid.NewGuid();

			var command = new Create<#= className #>(<#
		IList<IProperty> collectionProperties = GetPropertyList(this.Element);
		// Properties
		for(int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties[i];
#><#= i == 0 ? string.Empty : ", " #>item.<#= collectionProperty.Name #><#
		}
#>);
			OnCreate<#= className #>(serviceRequest, command);
			CommandSender.Send(command);
			OnCreated<#= className #>(serviceRequest, command);

			UnitOfWorkService.Commit(this);
			return new ServiceResponseWithResultData<Entities.<#= className #>>(item);
		}

		partial void OnCreate<#= className #>(IServiceRequest<string, Entities.<#= className #>> serviceRequest, Create<#= className #> command);

		partial void OnCreated<#= className #>(IServiceRequest<string, Entities.<#= className #>> serviceRequest, Create<#= className #> command);

<#
		}
#>
<#
		// Auto Update Method
		bool buildUpdatedEvent = steroTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildUpdateServiceMethod")
			.Value == "true";

		if (buildUpdatedEvent)
		{
#>
		/// <summary>
		/// Update an existing instance of the <see cref="Entities.<#= className #>"/>
		/// </summary>
		[OperationContract]
		public IServiceResponseWithResultData<Entities.<#= className #>> Update<#= className #>(IServiceRequest<string, Entities.<#= className #>> serviceRequest)
		{
			UnitOfWorkService.SetCommitter(this);
			Entities.<#= className #> item = serviceRequest.Data;
			var locatedItem = <#= className #>Repository.Load(item.Rsn);
			//if (locatedItem.Room.User.Rsn != userRsn)
			//	return new ServiceResponseWithResultData<uSure.Entities.Inventory> { State = ServiceResponseStateType.FailedAuthentication };

			var command = new Update<#= className #>(item.Rsn<#
		IList<IProperty> collectionProperties = GetPropertyList(this.Element);
		// Properties
		for(int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties[i];
#>, item.<#= collectionProperty.Name #><#
		}
#>);
			OnUpdate<#= className #>(serviceRequest, command);
			CommandSender.Send(command);
			OnUpdated<#= className #>(serviceRequest, command);

			UnitOfWorkService.Commit(this);
			return new ServiceResponseWithResultData<Entities.<#= className #>>(item);
		}

		partial void OnUpdate<#= className #>(IServiceRequest<string, Entities.<#= className #>> serviceRequest, Update<#= className #> command);

		partial void OnUpdated<#= className #>(IServiceRequest<string, Entities.<#= className #>> serviceRequest, Update<#= className #> command);

<#
		}
#>
<#
		// Auto Delete Method
		bool buildDeletedEvent = steroTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildDeleteServiceMethod")
			.Value == "true";

		if (buildDeletedEvent)
		{
#>
		/// <summary>
		/// Logically delete an existing instance of the <see cref="Entities.<#= className #>"/>
		/// </summary>
		[OperationContract]
		public IServiceResponse Delete<#= className #>(IServiceRequest<string, Entities.<#= className #>> serviceRequest)
		{
			UnitOfWorkService.SetCommitter(this);
			Entities.<#= className #> item = serviceRequest.Data;
			var locatedItem = <#= className #>Repository.Load(item.Rsn, false);
			if (locatedItem == null)
				return new ServiceResponseWithResultData<Entities.<#= className #>> { State = ServiceResponseStateType.FailedValidation };
			//if (locatedItem.Room.User.Rsn != userRsn)
			//	return new ServiceResponseWithResultData<Entities.<#= className #>> { State = ServiceResponseStateType.FailedAuthentication };
			if (locatedItem.IsLogicallyDeleted)
				return new ServiceResponseWithResultData<Entities.<#= className #>> { State = ServiceResponseStateType.FailedValidation };

			var command = new Delete<#= className #>(item.Rsn);
			OnDelete<#= className #>(serviceRequest, command);
			CommandSender.Send(command);
			OnDeleted<#= className #>(serviceRequest, command);

			UnitOfWorkService.Commit(this);
			return new ServiceResponse();
		}

		partial void OnDelete<#= className #>(IServiceRequest<string, Entities.<#= className #>> serviceRequest, Delete<#= className #> command);

		partial void OnDeleted<#= className #>(IServiceRequest<string, Entities.<#= className #>> serviceRequest, Delete<#= className #> command);
<#
		}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "AggregateRoot");
	}
#>