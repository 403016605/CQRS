<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var steroTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
if (string.IsNullOrWhiteSpace(baseClass))
	baseClass = "AggregateRoot";

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Cqrs.Domain;
using <#= GetParentNamespace(this.Element) #>.Events;

namespace <#= classNamespace #>
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	public <#= GetAbstract(this.Element) #> partial class <#= className #> : <#= baseClass #>
	{

		public Guid Rsn
		{
			get { return Id; }
			private set { Id = value; }
		}

<#
		IList<IProperty> collectionProperties = GetPropertyList(this.Element);
		// Properties
		foreach(var collectionProperty in collectionProperties)
		{
#>
		<#= GetPropertyVisibility(collectionProperty) #> <#= GetFullDisplayType(collectionProperty) #> <#= collectionProperty.Name #> { get; private set; }

<#
		}
#>
// ReSharper disable UnusedMember.Local
		/// <summary>
		/// A constructor for the <see cref="Cqrs.Domain.Factories.IAggregateFactory"/>
		/// </summary>
		private <#= className #>()
		{
<#
			foreach(IProperty collectionProperty in collectionProperties.Where(property => property.UpperValue != null && property.UpperValue.ToString() == "*").ToList())
			{
#>
			<#= collectionProperty.Name #> = new List<<#= GetDisplayType(collectionProperty) #>>();
<#
			}
#>
		}
// ReSharper restore UnusedMember.Local

		public <#= className #>(Guid rsn)
		{
			Rsn = rsn;
		}

<#
		IList<IOperation> collectionMethods = GetMethodList(this.Element);
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
#>
		public void <#= collectionMethod.Name #>(<#= GetMethodParameterList(collectionMethod) #>)
		{
			On<#= collectionMethod.Name #>(<#= GetMethodParameterNameList(collectionMethod) #>);
		}

		partial void On<#= collectionMethod.Name #>(<#= GetMethodParameterList(collectionMethod) #>);
<#
		}
#>
<#
		// Auto Create Method
		bool buildCreatedEvent = steroTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildCreateEvent")
			.Value == "true";

		if (buildCreatedEvent)
		{
#>

		public void Create<#= className #>(<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			#><#= (i == 0) ? string.Empty : ", " #><#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>)
		{
			ApplyChange(new <#= className #>Created(Rsn<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			#>, <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>));
		}
<#
		}
#>
<#
		// Auto Update Method
		bool buildUpdatedEvent = steroTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildUpdateEvent")
			.Value == "true";

		if (buildUpdatedEvent)
		{
#>

		public void Update<#= className #>(<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			#><#= (i == 0) ? string.Empty : ", " #><#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>)
		{
			ApplyChange(new <#= className #>Updated(Rsn<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			#>, <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>));
		}
<#
		}
#>
<#
		// Auto Delete Method
		bool buildDeletedEvent = steroTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildDeleteEvent")
			.Value == "true";

		if (buildDeletedEvent)
		{
#>

		public void Delete<#= className #>(<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			#><#= (i == 0) ? string.Empty : ", " #><#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>)
		{
			ApplyChange(new <#= className #>Deleted(Rsn));
		}
<#
		}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "AggregateRoot");
	}
#>