<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var steroTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Cqrs.Events;

namespace <#= classNamespace #>.Events
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	public <#= GetAbstract(this.Element) #> partial class <#= className #>Deleted : IEvent<<#= authenticationTokenType #>>
	{
		#region Implementation of IEvent

		public Guid Id
		{
			get
			{
				return Rsn;
			}
			set
			{
				Rsn = value;
			}
		}

		public int Version { get; set; }

		public DateTimeOffset TimeStamp { get; set; }

		#endregion

		#region Implementation of IMessageWithAuthenticationToken<<#= authenticationTokenType #>>

		public <#= authenticationTokenType #> AuthenticationToken { get; set; }

		#endregion

		public Guid Rsn { get; set; }

		public <#= className #>Deleted(Guid rsn)
		{
			Rsn = rsn;
		}
	}
}
<#+
	protected override bool AppliesToElement()
	{
		var steroTypeProperties = this.Element.AppliedStereotypes.Where(property => property.Name == "AggregateRoot");
		return ShouldGenerateCodeForElement(this.Element) && steroTypeProperties.Any() && steroTypeProperties.Single().PropertyInstances
			.Single(property => property.Name == "BuildDeleteCommand")
			.Value == "true";
	}
#>