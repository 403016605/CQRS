<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IPackage" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="EvolutionTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<# 
    // Header
    WriteAutoGeneratedWarningHeader();

    var domainName = (this.Element as INamedElement).Name;

    // Namespace
    string classNamespace = GetNamespace(this.Element.Namespace) + "." + domainName + ".Queries";

    if(!string.IsNullOrEmpty(classNamespace))
    {
#>
namespace <#= classNamespace #>
{
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Reflection;
    using Evolution.Sdk.Common;
<#
    }
#>

    /// <summary>
    /// Provides this assembly reference for scanning by Raven for indexes.
    /// </summary>
    <# WriteLine(GetGeneratedCodeAttribute()); #>
    public partial class <#= domainName #>IndexProvider : IIndexAssemblyProvider
    {
        private static IEnumerable<Assembly> BaseAssemblies { get; set; }

        static <#= domainName #>IndexProvider()
        {
            var baseAssemblies = new List<Assembly> { typeof(<#= domainName #>IndexProvider).Assembly };
            LoadAdditionalAssemblies(baseAssemblies);
            BaseAssemblies = baseAssemblies;
        }

        #region Implementation of IIndexAssemblyProvider

        /// <summary>
        /// Gets the assemblies to scan.
        /// </summary>
        public IEnumerable<Assembly> Assemblies { get { return BaseAssemblies; }}

        #endregion

        static partial void LoadAdditionalAssemblies(IEnumerable<Assembly> baseAssemblies);
    }
}

<#+
    protected override bool AppliesToElement()
    {
        return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(st => st.Name == "Domain");
    }
#>