<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IPackage" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var steroTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Domain");

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = this.Element.Name;

// using statements
#>
using System.CodeDom.Compiler;
using Cqrs.DataStores;
using Cqrs.Mongo.DataStores;
using Cqrs.Mongo.Factories;
using MongoDB.Driver;

namespace <#= classNamespace #>.<#= className #>.Factories
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	/// <summary>
	/// A factory for obtaining <see cref="IDataStore{TData}"/> instances from Mongo
	/// </summary>
	public partial class <#= className #>MongoDataStoreFactory : Cqrs.Mongo.Factories.MongoDataStoreFactory, I<#= className #>DataStoreFactory
	{
		public <#= className #>MongoDataStoreFactory(IMongoDataStoreConnectionStringFactory mongoDataStoreConnectionStringFactory)
			: base(mongoDataStoreConnectionStringFactory)
		{
		}

		#region Implementation of I<#= className #>DataStoreFactory

<#
		foreach (var element in AllElements(this.Element, "AggregateRoot").OfType<INamedElement>().OrderBy(e => e.Name))
		{
			string elementName = element.Name;
			string moduleName = ((INamedElement)FindModuleElement(element)).Name;
#>
		public virtual IDataStore<<#= moduleName #>.Entities.<#= elementName #>> Get<#= elementName #>DataStore()
		{
			OnObtain<#= elementName #>Collection();
			MongoCollection<<#= moduleName #>.Entities.<#= elementName #>> collection = GetCollection<<#= moduleName #>.Entities.<#= elementName #>>();
			OnObtained<#= elementName #>Collection(ref collection);
			VerifyIndexes(collection);
			return new MongoDataStore<<#= moduleName #>.Entities.<#= elementName #>>(collection);
		}

<#
		}
#>
		#endregion

<#
		foreach (var element in AllElements(this.Element, "AggregateRoot").OfType<INamedElement>().OrderBy(e => e.Name))
		{
			string elementName = element.Name;
			string moduleName = ((INamedElement)FindModuleElement(element)).Name;
#>
		partial void OnObtain<#= elementName #>Collection();

		partial void OnObtained<#= elementName #>Collection(ref MongoCollection<<#= moduleName #>.Entities.<#= elementName #>> collection);

		partial void VerifyIndexes(MongoCollection<<#= moduleName #>.Entities.<#= elementName #>> collection);

<#
		}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Domain");
	}
#>