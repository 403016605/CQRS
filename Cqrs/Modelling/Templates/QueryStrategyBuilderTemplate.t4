<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var steroTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "QueryStrategy");

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string aggregateRootName = steroTypeProperties.PropertyInstances
	.Single(property => property.Name == "AggregateRootName")
	.Value;

// using statements
#>

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using Cqrs.Repositories.Queries;
using uSure.Domain.Factories;

namespace <#= classNamespace #>
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	public partial class <#= className #>Builder : QueryBuilder<<#= className #>, Entities.<#= aggregateRootName #>>, I<#= className #>Builder
	{
		public <#= className #>Builder(IDataStoreFactory dataStoreFactory)
			: base(dataStoreFactory.Get<#= aggregateRootName #>DataStore())
		{
		}

		#region Overrides of QueryBuilder<<#= className #>,Entities.<#= aggregateRootName #>>

		protected override IQueryable<Entities.<#= aggregateRootName #>> GeneratePredicate(QueryPredicate queryPredicate, IQueryable<Entities.<#= aggregateRootName #>> leftHandQueryable = null)
		{
			<#= className #> queryStrategy = GetNullQueryStrategy();
			SortedSet<QueryParameter> parameters = queryPredicate.Parameters;

			IQueryable<Entities.<#= aggregateRootName #>> resultingQueryable;
<#
		IList<IOperation> collectionMethods = GetMethodList(this.Element);
		// If statements from Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
#>
			if (queryPredicate.Name == GetFunctionName<<#= GetMethodParameterTypeList(collectionMethod) #>>(queryStrategy.<#= collectionMethod.Name #>))
			{
				OnGeneratePredicate<#= className #>(queryPredicate, leftHandQueryable, parameters, ref resultingQueryable);
				GeneratePredicate<#= className #>(parameters, leftHandQueryable, ref resultingQueryable);
				OnGeneratePredicated<#= className #>(queryPredicate, leftHandQueryable, parameters, ref resultingQueryable);
			}
<#
		}
#>

			throw new Exception();
		}

		#endregion
<#
		// Partial methods from Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
#>

		partial void OnGeneratePredicate<#= className #>(QueryPredicate queryPredicate, IQueryable<Entities.<#= aggregateRootName #>> leftHandQueryable, SortedSet<QueryParameter> parameters, ref IQueryable<Entities.<#= aggregateRootName #>> resultingQueryable);

		partial void GeneratePredicate<#= className #>(SortedSet<QueryParameter> parameters, IQueryable<Entities.<#= aggregateRootName #>> leftHandQueryable, ref IQueryable<Entities.<#= aggregateRootName #>> resultingQueryable);

		partial void OnGeneratePredicated<#= className #>(QueryPredicate queryPredicate, IQueryable<Entities.<#= aggregateRootName #>> leftHandQueryable, SortedSet<QueryParameter> parameters, ref IQueryable<Entities.<#= aggregateRootName #>> resultingQueryable);
<#
		}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "QueryStrategy");
	}
#>