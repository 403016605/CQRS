<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var steroTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "QueryStrategy");
IElement domainElement = FindDomainElement(this.Element);
var domainStereoTypeProperties = domainElement.AppliedStereotypes.Single(property => property.Name == "Domain");
string authenticationTokenType = domainStereoTypeProperties.PropertyInstances.Single(property => property.Name == "AuthenticationTokenType").Value;

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);

// using statements
#>

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Cqrs.Repositories.Authentication;
using Cqrs.Repositories.Queries;

namespace <#= classNamespace #>
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	public partial class <#= className #> : QueryStrategy, I<#= className #>
	{
		protected IPermissionScopeValueHelper<<#= authenticationTokenType #>> PermissionScopeValueHelper { get; private set; }

		public <#= className #>(IPermissionScopeValueHelper<<#= authenticationTokenType #>> permissionScopeValueHelper)
		{
			PermissionScopeValueHelper = permissionScopeValueHelper;
		}

<#
		IList<IOperation> collectionMethods = GetMethodList(this.Element);
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
#>
		public virtual <#= className #> <#= collectionMethod.Name #>(<#= GetMethodParameterList(collectionMethod) #>)
		{
<#
		var methodSteroTypeProperties = collectionMethod.AppliedStereotypes.SingleOrDefault(property => property.Name == "QueryStrategyMethod");
		if (methodSteroTypeProperties != null)
		{
			bool IsNotLogicallyDeleted = methodSteroTypeProperties.PropertyInstances.Any(property => property.Name == "IsNotLogicallyDeleted" && property.Value == "true");
			if (IsNotLogicallyDeleted)
			{
#>
			QueryPredicate = IsNotLogicallyDeleted();
<#
			}
			string permissionScope = methodSteroTypeProperties.PropertyInstances.Single(property => property.Name == "PermissionScope").Value;
			if (permissionScope != "Any")
			{
				if (!IsNotLogicallyDeleted)
				{
#>
			QueryPredicate = WithPermissionScope<#= permissionScope #>(PermissionScopeValueHelper.GetPermissionScope());
<#
				}
				else
				{
#>
			QueryPredicate = And(WithPermissionScope<#= permissionScope #>(PermissionScopeValueHelper.GetPermissionScope()));
<#
				}
			}
		}
		if (methodSteroTypeProperties.PropertyInstances.Any(property => property.Name == "IncludeBody" && property.Value == "true"))
		{
			string methodParameterNameList = GetMethodParameterNameList(collectionMethod);
			if (!string.IsNullOrWhiteSpace(methodParameterNameList))
				methodParameterNameList = ", " + methodParameterNameList;
#>
			QueryPredicate = And(BuildQueryPredicate(<#= collectionMethod.Name #><#= methodParameterNameList #>));
<#
		}
#>
			On<#= collectionMethod.Name #>(<#= GetMethodParameterNameList(collectionMethod) #>);

			return this;
		}

		partial void On<#= collectionMethod.Name #>(<#= GetMethodParameterList(collectionMethod) #>);
<#
		}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "QueryStrategy");
	}
#>