<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var steroTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Service");

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
if (!string.IsNullOrWhiteSpace(baseClass))
	baseClass = ": " + baseClass;

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;

namespace <#= classNamespace #>
{
<#
	// Class and Attributes
	string aggregateRootName = steroTypeProperties.PropertyInstances
		.Single(property => property.Name == "AggregateRootName")
		.Value;
#>
	public partial interface I<#= className #> <#= baseClass #>
	{
<#
		IList<IOperation> collectionMethods = GetMethodList(this.Element);
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
			string methodTypeName = MethodType(collectionMethod).Replace("<", "<Entities.");
			if (!methodTypeName.Contains("<"))
				methodTypeName = "Entities." + methodTypeName;

		string methodSignatureParameter = string.Empty;
		
		var parameter = collectionMethod.OwnedParameters.SingleOrDefault(p => p.Direction != ParameterDirectionKind.Return);
		if (parameter != null)
			methodSignatureParameter = string.Format("IServiceRequestWithData<string, {0}> serviceRequest", GetFullDisplayType(parameter, false));
		else
			methodSignatureParameter = "IServiceRequest<string> serviceRequest";
#>
		[OperationContract]
		IServiceResponseWithResultData<<#= methodTypeName #>> <#= collectionMethod.Name #>(<#= methodSignatureParameter #>);

<#
		}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Service");
	}
#>