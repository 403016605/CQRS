<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="System.Linq" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var steroTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Service");

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
if (!string.IsNullOrWhiteSpace(baseClass))
	baseClass = ": " + baseClass;

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;
using Cqrs.Commands;
using Cqrs.Repositories.Queries;
using uSure.Domain.Services;
using <#= classNamespace #>.Commands;
using <#= classNamespace #>.Repositories;

namespace <#= classNamespace #>
{
<#
	// Class and Attributes
#>
	public partial class <#= className #> <#= baseClass #>
	{
		protected IVersionService VersionService { get; private set; }

		public <#= className #>(ICommandSender commandSender, IUnitOfWorkService unitOfWorkService, IQueryFactory queryFactory, <#= className #>Repository <#= GetLowercaseFirstCharacter(className) #>Repository, IVersionService versionService)
			: this (commandSender, unitOfWorkService, queryFactory, <#= GetLowercaseFirstCharacter(className) #>Repository)
		{
			VersionService = versionService;
		}
<#
		IList<IOperation> collectionMethods = GetMethodList(this.Element);
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
			string methodTypeName = MethodType(collectionMethod).Replace("<", "<Entities.");
			if (!methodTypeName.Contains("<"))
				methodTypeName = "Entities." + methodTypeName;
#>

		partial void On<#= collectionMethod.Name #>(<#= GetMethodParameterList(collectionMethod) #>, ref IServiceResponseWithResultData<<#= methodTypeName #>> results)
		{
			throw new NotImplementedException();
		}
<#
		}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Service");
	}
#>