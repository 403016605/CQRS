<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var steroTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Cqrs.Commands;
using Cqrs.Domain;

namespace <#= classNamespace #>.Commands.Handlers
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	public <#= GetAbstract(this.Element) #> partial class Update<#= className #>CommandHandler : ICommandHandler<Update<#= className #>>
	{
		protected IUnitOfWork UnitOfWork { get; private set; }

		public Update<#= className #>CommandHandler(IUnitOfWork unitOfWork)
		{
			UnitOfWork = unitOfWork;
		}

		#region Implementation of ICommandHandler<in Update<#= className #>>

		public void Handle(Update<#= className #> command)
		{
			<#= className #> item = null;
			OnUpdate<#= className #>(command, ref item);
			if (item == null)
				item = UnitOfWork.Get<<#= className #>>(command.Rsn);
			item.Update<#= className #>(<#
		IList<IProperty> collectionProperties = GetPropertyList(this.Element);
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			#><#= (i == 0) ? string.Empty : ", " #>command.<#= collectionProperty.Name #><#
		}
#>);
			OnUpdated<#= className #>(command, item);
			OnCommit(command, item);
			UnitOfWork.Commit();
			OnCommited(command, item);
		}

		#endregion

		partial void OnUpdate<#= className #>(Update<#= className #> command, ref <#= className #> item);

		partial void OnUpdated<#= className #>(Update<#= className #> command, <#= className #> item);

		partial void OnCommit(Update<#= className #> command, <#= className #> item);

		partial void OnCommited(Update<#= className #> command, <#= className #> item);
	}
}
<#+
	protected override bool AppliesToElement()
	{
		var steroTypeProperties = this.Element.AppliedStereotypes.Where(property => property.Name == "AggregateRoot");
		return ShouldGenerateCodeForElement(this.Element) && steroTypeProperties.Any() && steroTypeProperties.Single().PropertyInstances
			.Single(property => property.Name == "BuildUpdateEvent")
			.Value == "true";
	}
#>