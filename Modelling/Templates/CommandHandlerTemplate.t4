<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Command");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
if (!string.IsNullOrWhiteSpace(baseClass))
	baseClass = baseClass + ", ";
baseClass = baseClass + "ICommandHandler<" + authenticationTokenType + ", " + className + "Command>";

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Cqrs.Commands;
using Cqrs.Configuration;
using Cqrs.Domain;
using cdmdotnet.Logging;

namespace <#= classNamespace #>.Handlers
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	public <#= GetAbstract(this.Element) #> partial class <#= className #>CommandHandler : <#= baseClass #>
	{
		protected IUnitOfWork<<#= authenticationTokenType #>> UnitOfWork { get; private set; }

		protected IDependencyResolver DependencyResolver { get; private set; }

		protected ILogger Log { get; private set; }

		public <#= className #>CommandHandler(IUnitOfWork<<#= authenticationTokenType #>> unitOfWork, IDependencyResolver dependencyResolver, ILogger log)
		{
			UnitOfWork = unitOfWork;
			DependencyResolver = dependencyResolver;
			Log = log;
		}

<#
		IList<IProperty> collectionProperties = GetPropertyList(this.Element);
		// Properties
		foreach(var collectionProperty in collectionProperties)
		{
#>
		<#= GetPropertyVisibility(collectionProperty) #> <#= GetFullDisplayType(collectionProperty) #> <#= collectionProperty.Name #> { get; set; }

<#
		}
#>

		#region Implementation of ICommandHandler<in <#= className #>>

		public void Handle(<#= className #>Command command)
		{
<#
	string aggregateRootName = null;
	bool isSimple = stereoTypeProperties.PropertyInstances.Any(property => property.Name == "CommandType" && property.Value == "Simple");
	bool createsNewInstance = stereoTypeProperties.PropertyInstances.Any(property => property.Name == "CreatesNewInstance" && property.Value == "true");
	if (isSimple)
		aggregateRootName = stereoTypeProperties.PropertyInstances.Single(property => property.Name == "AggregateRoot").Value;
	if (isSimple && !string.IsNullOrWhiteSpace(aggregateRootName))
	{
#>
			<#= aggregateRootName #> item = null;
			On<#= className #>(command, ref item);
			if (item == null)
<#
		if (createsNewInstance)
		{
#>
			{
				item = new <#= aggregateRootName #>(DependencyResolver, Log, command.Rsn == Guid.Empty ? Guid.NewGuid() : command.Rsn);
				UnitOfWork.Add(item);
			}
<#
		}
		else
		{
#>
				item = UnitOfWork.Get<<#= aggregateRootName #>>(command.Rsn);
<#
		}
#>
			item.<#= className #>(<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			if (i > 0)
			{
			#>, <#
			}
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			#><#= GetLowercaseFirstCharacter(collectionProperty.Name) #>: command.<#= collectionProperty.Name #><#
		}
#>);
			On<#= className #>Done(command, item);
			OnCommit(command, item);
			UnitOfWork.Commit();
			OnCommited(command, item);
<#
	}
	else
	{
#>
			OnHandle(command);
<#
	}
#>
		}

		#endregion
<#
	if (isSimple && !string.IsNullOrWhiteSpace(aggregateRootName))
	{
#>
		partial void On<#= className #>(<#= className #>Command command, ref <#= aggregateRootName #> item);

		partial void On<#= className #>Done(<#= className #>Command command, <#= aggregateRootName #> item);

		partial void OnCommit(<#= className #>Command command, <#= aggregateRootName #> item);

		partial void OnCommited(<#= className #>Command command, <#= aggregateRootName #> item);
<#
	}
	else
	{
#>
		partial void OnHandle(<#= className #>Command command);
<#
	}
#>

<#
		IList<IOperation> collectionMethods = GetMethodList(this.Element);
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
#>
		public void <#= collectionMethod.Name #>(<#= GetMethodParameterList(collectionMethod) #>)
		{
			On<#= collectionMethod.Name #>(<#= GetMethodParameterNameList(collectionMethod) #>);
		}

		partial void On<#= collectionMethod.Name #>(<#= GetMethodParameterList(collectionMethod) #>);
<#
		}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Command");
	}
#>