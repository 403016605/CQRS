<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Command");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
if (!string.IsNullOrWhiteSpace(baseClass))
	baseClass = baseClass + ", ";
baseClass = baseClass + "ICommand<" + authenticationTokenType + ">";

// using statements
WriteUsingStatements(this.Element);
#>
using System.Runtime.Serialization;
using Cqrs.Commands;
using Cqrs.Messages;

namespace <#= classNamespace #>
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	public <#= GetAbstract(this.Element) #> partial class <#= className #>Command : <#= baseClass #>
	{
		#region Implementation of ICommand

		[DataMember]
		public Guid Id
		{
			get { return Rsn; }
			set { Rsn = value; }
		}

		[DataMember]
		public int ExpectedVersion { get; set; }

		#endregion

		#region Implementation of IMessageWithAuthenticationToken<<#= authenticationTokenType #>>

		[DataMember]
		public <#= authenticationTokenType #> AuthenticationToken { get; set; }

		#endregion

		#region Implementation of IMessage

		[DataMember]
		public Guid CorrelationId { get; set; }

		[DataMember]
		[Obsolete("Use Frameworks, It's far more flexible and OriginatingFramework")]
		public FrameworkType Framework { get; set; }

		/// <summary>
		/// The originating framework this message was sent from.
		/// </summary>
		[DataMember]
		public string OriginatingFramework { get; set; }

		/// <summary>
		/// The frameworks this <see cref="IMessage"/> has been delivered to/sent via already.
		/// </summary>
		[DataMember]
		public IEnumerable<string> Frameworks { get; set; }

		[Obsolete("Use CorrelationId")]
		[DataMember]
		public Guid CorrolationId
		{
			get { return CorrelationId; }
			set { CorrelationId = value; }
		}

		#endregion

		[DataMember]
		public Guid Rsn { get; set; }

<#
		IList<IProperty> collectionProperties = GetPropertyList(this.Element)
			.Where(property=> property.Type != this)
			.ToList();
		// Properties
		foreach(var collectionProperty in collectionProperties)
		{
			if (collectionProperty.OwningAssociation != null)
			{
				// This is new but supposed to remove any generation of relationships sine we only use attributes
				continue;
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
			}
#>
		[DataMember]
<# WriteSummaryComment(collectionProperty.Description); #>
		<#= GetPropertyVisibility(collectionProperty) #> <#= GetFullDisplayType(collectionProperty) #> <#= collectionProperty.Name #> { get; set; }

<#
		}
#>
		public <#= className #>Command(Guid rsn<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				// This is new but supposed to remove any generation of relationships sine we only use attributes
				continue;
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
			}
			#>, <#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>)
		{
			Rsn = rsn;
<#
		foreach(IProperty collectionProperty in collectionProperties)
		{
			if (collectionProperty.OwningAssociation != null)
			{
				// This is new but supposed to remove any generation of relationships sine we only use attributes
				continue;
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
			}
#>
			<#= collectionProperty.Name #> = <#= GetLowercaseFirstCharacter(collectionProperty.Name) #>;
<#
		}
#>
		}
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Command");
	}
#>