<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var steroTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);

// using statements
WriteUsingStatements(this.Element);
#>
using Cqrs.Commands;

namespace <#= classNamespace #>.Commands
{
<#
	// Class and Attributes
#>
	<#= GetGeneratedCodeAttribute() #>
	public <#= GetAbstract(this.Element) #> partial class Create<#= className #>Command : ICommand<<#= authenticationTokenType #>>
	{
		#region Implementation of ICommand

		public int ExpectedVersion { get; set; }

		#endregion

		#region Implementation of IMessageWithAuthenticationToken<<#= authenticationTokenType #>>

		public <#= authenticationTokenType #> AuthenticationToken { get; set; }

		#endregion

		public Guid Rsn { get; set; }

<#
		IList<IProperty> collectionProperties = GetPropertyList(this.Element);
		// Properties
		foreach(IProperty collectionProperty in collectionProperties)
		{
#>
		<#= GetPropertyVisibility(collectionProperty) #> <#= GetFullDisplayType(collectionProperty) #> <#= collectionProperty.Name #> { get; private set; }

<#
		}
#>

		public Create<#= className #>Command(Guid rsn<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			#>, <#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>)
		{
			Rsn = rsn;
<#
		foreach(IProperty collectionProperty in collectionProperties)
		{
#>
			<#= collectionProperty.Name #> = <#= GetLowercaseFirstCharacter(collectionProperty.Name) #>;
<#
		}
#>
		}
	}
}
<#+
	protected override bool AppliesToElement()
	{
		var steroTypeProperties = this.Element.AppliedStereotypes.Where(property => property.Name == "AggregateRoot");
		return ShouldGenerateCodeForElement(this.Element) && steroTypeProperties.Any() && steroTypeProperties.Single().PropertyInstances
			.Single(property => property.Name == "BuildCreateCommand")
			.Value == "true";
	}
#>