<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Entity");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
if (classNamespace.EndsWith(".Entities"))
	classNamespace = classNamespace + ".EventHandlers";
else
	classNamespace = classNamespace  + ".Handlers";
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
<#
string eventHandlerTechnology = GetEventHandlerTechnology(this.Element);
switch(eventHandlerTechnology)
{
	case "Akka":
		baseClass = "ReceiveActor";
#>using Akka.Actor;
<#
		break;
	default:
		// for now do nothing
		break;
}
#>
using cdmdotnet.Logging;
using Cqrs.Events;
using Cqrs.Domain;

namespace <#= classNamespace #>
{
<#
	IEnumerable<IAssociation> relationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => associationEnd.TargetElement == this.Element);
#>
	<#= GetGeneratedCodeAttribute() #>
	public <#= GetAbstract(this.Element) #> partial class <#= className #>EventHandler
<#
	int index = 0;
	foreach(IAssociation relationship in relationships)
	{
		var targetElement = (INamedElement)relationship.TargetElement;
		var sourceElement = (INamedElement)relationship.SourceElement;
		string entityElementName = string.Format("{0}.{1}", GetNamespace(targetElement.Namespace).Replace("::", "."), targetElement.Name);
		string eventElementName = string.Format("{0}.{1}", GetNamespace(sourceElement.Namespace).Replace("::", "."), sourceElement.Name);
#>
		<#= index == 0 ? ":" : "," #> IEventHandler<<#= authenticationTokenType #>, <#= eventElementName #>>
<#
		index++;
	}
#>
	{
<#
switch(eventHandlerTechnology)
{
	case "Akka":
		baseClass = "ReceiveActor";
#>
		/// <summary>
		/// Instantiates the <see cref="<#= className #>EventHandler"/> class registering any <see cref="ReceiveActor.Receive{T}(System.Func{T,System.Threading.Tasks.Task})"/> required.
		/// </summary>
		public <#= className #>EventHandler()
		{
<#
	foreach(IAssociation relationship in relationships)
	{
		var targetElement = (INamedElement)relationship.TargetElement;
		var sourceElement = (INamedElement)relationship.SourceElement;
		string entityElementName = string.Format("{0}.{1}", GetNamespace(targetElement.Namespace).Replace("::", "."), targetElement.Name);
		string eventElementName = string.Format("{0}.{1}", GetNamespace(sourceElement.Namespace).Replace("::", "."), sourceElement.Name);
#>
			Receive<<#= eventElementName #>>(@event => Handle(@event));
<#
	}
#>
		}
<#
		break;
	default:
		// for now do nothing
		break;
}
#>

		public <#= className #>EventHandler(ILogger logger)
		{
			Logger = logger;
		}

		protected ILogger Logger { get; private set; }

<#
foreach(IAssociation relationship in relationships)
{
		var targetElement = (INamedElement)relationship.TargetElement;
		var sourceElement = (INamedElement)relationship.SourceElement;
		string entityElementName = string.Format("{0}.{1}", GetNamespace(targetElement.Namespace).Replace("::", "."), targetElement.Name);
		string eventElementName = string.Format("{0}.{1}", GetNamespace(sourceElement.Namespace).Replace("::", "."), sourceElement.Name);
#>
		#region Implementation of IEventHandler<in <#= eventElementName #>>

		public void Handle(<#= eventElementName #> @event)
		{
			OnHandle(@event);
		}

		#endregion

		partial void OnHandle(<#= eventElementName #> @event);
<#
}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		var result = ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Entity");
		if (!result)
			return false;
		IEnumerable<IAssociation> relationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => associationEnd.TargetElement == this.Element);
		return relationships.Any();
	}
#>