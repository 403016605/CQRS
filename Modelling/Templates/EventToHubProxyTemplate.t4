<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Event");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
IElement domainElement = FindDomainElement(this.Element);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);

string eventName = classNamespace + "." + className;

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Cqrs.Authentication;
using Cqrs.Domain;
using Cqrs.Events;

namespace <#= GetNamespace(((INamedElement)domainElement).Namespace) #>.Domain.Host.Web.SignalR
{
<#
	// Class and Attributes
#>
	// <#= GetGeneratedCodeAttribute() #>
	public <#= GetAbstract(this.Element) #> partial class EventToHubProxy
		: IEventHandler<<#= authenticationTokenType #>, <#= eventName #>>
	{
		#region Implementation of IEventHandler<in <#= eventName #>>

		public void Handle(<#= eventName #> @event)
		{
			bool continueExecute = true;
			OnHandle(@event, ref continueExecute);
			if (!continueExecute)
				return;
			HandleGenericEvent(@event);
			OnHandled(@event);
		}

		#endregion

		partial void OnHandle(<#= eventName #> @event, ref bool continueExecute);

		partial void OnHandled(<#= eventName #> @event);
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Event")
			&& this.Element.AppliedStereotypes.Single(property => property.Name == "Event")
				.PropertyInstances
				.Single(property => property.Name == "EventNotification")
				.Value != "NoOne";
	}
#>