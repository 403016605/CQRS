<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Service");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
classNamespace = classNamespace.Substring(0, classNamespace.LastIndexOf("."));
string className = ClassifierName(this.Element);

string areaName = classNamespace.Substring(classNamespace.LastIndexOf(".") + 1);
classNamespace = classNamespace + ".Controllers";

// using statements
WriteUsingStatements(this.Element);
#>
using System;
using System.Collections.Generic;
using System.Web.Http;

using cdmdotnet.Logging;
using Cqrs.Authentication;
using Cqrs.Commands;
using Cqrs.Events;
using Cqrs.Repositories.Queries;
using Cqrs.Services;
using Cqrs.WebApi;

using <#= classNamespace #>;
using <#= classNamespace #>.Commands;
using <#= classNamespace #>.Repositories;
using <#= classNamespace #>.Services;

namespace <#= classNamespace #>
{
<#
	// Class and Attributes
#>
<# WriteSummaryComment(this.Element.Description) ; #>
	/// <remarks>
	/// Ensure you include the nuget package Cqrs.WebApi.
	/// For automatic help documentation generation visit 
	/// https://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/creating-api-help-pages
	/// and start at the section "Adding Help Pages to an Existing Project".
	/// Then enable XML documentation for all projects for both DEBUG and RELEASE builds.
	/// </remarks>
	public <#= GetAbstract(this.Element) #> partial class <#= className #>Controller
	{
<#
		IList<IOperation> collectionMethods = GetMethodList(this.Element);
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
			string methodResponseTypeName = "IServiceResponseWithResultData<";
			string methodTypeName = MethodType(collectionMethod).Replace("<", "<Entities.");
			if (IsMethodTypeEntity(collectionMethod))
			{
				string methodTypeNameSuffix = string.Empty;
				while (methodTypeName.EndsWith(">"))
				{
					methodTypeNameSuffix = string.Concat(methodTypeNameSuffix, methodTypeName.Substring(methodTypeName.Length - 1));
					methodTypeName = methodTypeName.Substring(0, methodTypeName.Length - 1);
				}
				methodTypeName = string.Format("{0}Entity{1}", methodTypeName, methodTypeNameSuffix);
			}
			if (methodTypeName == "void")
			{
				methodResponseTypeName = "IServiceResponse";
				methodTypeName = string.Empty;
			}
			else
			{
				if (!methodTypeName.Contains("<"))
					methodTypeName = "Entities." + methodTypeName;
				methodTypeName = methodTypeName + ">";
			}

			string methodParameterList = GetMethodParameterList(collectionMethod);
			if (!string.IsNullOrWhiteSpace(methodParameterList))
				methodParameterList = methodParameterList + ", ";

			string methodParameterNameList = GetMethodParameterNameList(collectionMethod);
			if (!string.IsNullOrWhiteSpace(methodParameterNameList))
				methodParameterNameList = methodParameterNameList + ", ";

			var methodSignatureParameter = string.Empty;

			var returnParameter = collectionMethod.OwnedParameters.SingleOrDefault(p => p.Direction == ParameterDirectionKind.Return);
			var parameters = collectionMethod.OwnedParameters.Where(p => p.Direction != ParameterDirectionKind.Return);
			if (returnParameter == null && parameters.Any())
				methodSignatureParameter = string.Format("IServiceRequestWithData<{0}, {1}{2}Parameters> serviceRequest", authenticationTokenType, className, collectionMethod.Name);
			else if (returnParameter != null)
				methodSignatureParameter = string.Format("IServiceRequestWithData<{0}, {1}{2}Parameters> serviceRequest", authenticationTokenType, className, collectionMethod.Name);
			else
				methodSignatureParameter = string.Format("IServiceRequest<{0}> serviceRequest", authenticationTokenType);

		string relationshipName = collectionMethod.Name;
		string httpMethodAttributeValue = collectionMethod
			.AppliedStereotypes.Single(property => property.Name == "ServiceMethod")
			.PropertyInstances.Single(property => property.Name == "WebApiVerb")
			.Value;
		string responseDataType = methodResponseTypeName + methodTypeName;
		string parameterName = className + collectionMethod.Name + "Parameters";
		string parameterVariableName = "parameters";
#>

		#region <#= relationshipName #>

<# WriteSummaryComment(collectionMethod.Description) ; #>
		[Route("<#= collectionMethod.PropertyInstances.Any(property => property.Name == "IsWebApiUrlRsned" && property.Value == "true") ? "rsn:guid/" : null #><#= collectionMethod.Name #>")]
		[<#= httpMethodAttributeValue #>]
		public virtual <#= responseDataType #> <#= relationshipName #>([FromBody]<#= parameterName #> <#= parameterVariableName #>)
		{
			return <#= relationshipName #>(CreateRequestWithData<<#= authenticationTokenType #>, <#= parameterName #>>(() => <#= parameterVariableName #>));
		}

		<#= responseDataType #> I<#= className #>Service.<#= relationshipName #>(IServiceRequestWithData<<#= authenticationTokenType #>, <#= parameterName #>> serviceRequest)
		{
			return <#= relationshipName #>(serviceRequest);
		}

<# WriteSummaryComment(collectionMethod.Description) ; #>
		protected virtual <#= responseDataType #> <#= relationshipName #>(IServiceRequestWithData<<#= authenticationTokenType #>, <#= parameterName #>> serviceRequest)
		{
			Logger.LogDebug("Entered", "<#= className #>/<#= relationshipName #>");

			AuthenticationTokenHelper.SetAuthenticationToken(serviceRequest.AuthenticationToken);
			CorrelationIdHelper.SetCorrelationId(serviceRequest.CorrelationId);
			UnitOfWorkService.SetCommitter(this);
			<#= parameterName #> item = serviceRequest.Data;
			<#= methodResponseTypeName #><#= methodTypeName #> results = null;
			On<#= collectionMethod.Name #>(serviceRequest, ref results);
			Logger.LogDebug("Exited", "<#= className #>/<#= relationshipName #>");
			return CompleteResponse(results);
		}

		partial void On<#= collectionMethod.Name #>(<#= methodSignatureParameter #>, ref <#= methodResponseTypeName #><#= methodTypeName #> results);

		#endregion
<#
		}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Service");
	}
#>