using System;
using System.Linq;
using Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml;
using Microsoft.VisualStudio.Modeling;
using Microsoft.VisualStudio.Uml.Classes;

namespace Cqrs.Modelling.UmlProfiles.Builders
{
	public class CreateCommandModelBuilder : ModelBuilder
	{
		protected override bool ShouldCreateModel(Store store, PropertyInstance propertyInstance)
		{
			return propertyInstance.Name == "BuildCreateCommand" && propertyInstance.Value.ToLowerInvariant() == "true";
		}

		protected override bool ShouldDeleteModel(Store store, PropertyInstance propertyInstance)
		{
			return propertyInstance.Name == "BuildCreateCommand" && propertyInstance.Value.ToLowerInvariant() == "false";
		}

		protected override void CreateModel(Store store, PropertyInstance propertyInstance)
		{
			// ElementFactory elementFactory = GetMatchingElementFactory(store, propertyInstance);
			IClass propertyInstanceModelClass = GetPropertyInstanceModelClass(store, propertyInstance);
			// See https://msdn.microsoft.com/en-us/library/cc512845.aspx#elements for copy/paste
			using (var transaction = store.TransactionManager.BeginTransaction())
			{
				try
				{
					var modulePackage = propertyInstanceModelClass.Package as Package;
					var commandsPackage = modulePackage.NestedPackages.SingleOrDefault(package => package.Name == "Commands") as Package;
					if (commandsPackage == null)
					{
						commandsPackage = modulePackage.CreatePackage() as Package;
						commandsPackage.Name = "Commands";
					}

					string className = string.Format("Create{0}Command", propertyInstanceModelClass.Name);
					var clonedClass = commandsPackage.OwnedElements
						.Cast<Class>()
						.SingleOrDefault(element => CSharpHelper.ClassifierName(element) == className);
					if (clonedClass == null)
					{
						clonedClass = commandsPackage.CreateClass() as Class;
						clonedClass.Name = className;
					}
					AddStereotypeInstanceIfMissingRefreshOtherwise(clonedClass, propertyInstanceModelClass, "AutoGenerated");
					AddStereotypeInstanceIfMissingRefreshOtherwise(clonedClass, propertyInstanceModelClass, "Command");

					// Copy Properties
					foreach (IProperty ownedAttribute in propertyInstanceModelClass.OwnedAttributes)
					{
						AddAttributeIfMissingRefreshOtherwise(clonedClass, ownedAttribute);
					}

					// Create Association

					// Create stub operation on propertyInstanceModelClass
					var operation = AddOperationIfMissingRefreshOtherwise(clonedClass, string.Format("Create{0}", propertyInstanceModelClass.Name));
					IStereotypeInstance stereoType = AddStereotypeInstanceIfMissingRefreshOtherwise(operation, operation, "AggregateRootMethod");
					stereoType.PropertyInstances.Single(property => property.Name == "AggregateRootMethodType").Value = "Simple";
					stereoType.PropertyInstances.Single(property => property.Name == "EventName").Value = string.Format("{0}Created", propertyInstanceModelClass.Name);

					transaction.Commit();
				}
				catch (Exception)
				{
					transaction.Rollback();
				}
			}
		}

		protected override void DeleteModel(Store store, PropertyInstance propertyInstance)
		{
			throw new NotImplementedException();
		}
	}
}