//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Copyright
// -----------------------------------------------------------------------
// <copyright company="cdmdotnet Limited">
//     Copyright cdmdotnet Limited. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------
#endregion
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;
using Cqrs.Commands;
using Cqrs.Authentication;
using cdmdotnet.Logging;
using Cqrs.Repositories.Queries;
using Cqrs.Services;
using MyCompany.MyProject.Domain.Authentication.Commands;
using MyCompany.MyProject.Domain.Authentication.Repositories;

namespace MyCompany.MyProject.Domain.Authentication.Services
{
	[GeneratedCode("CQRS UML Code Generator", "1.601.786")]
	[DataContract(Namespace="https://cqrs/MyProject/Domain/Authentication/1001/")]
	public partial class UserService : IUserService
	{
		protected ICommandSender<Cqrs.Authentication.ISingleSignOnToken> CommandSender { get; private set; }

		protected IUnitOfWorkService UnitOfWorkService { get; private set; }

		protected IUserRepository UserRepository { get; private set; }

		protected IQueryFactory QueryFactory { get; private set; }

		protected IAuthenticationTokenHelper<Cqrs.Authentication.ISingleSignOnToken> AuthenticationTokenHelper { get; set; }

		protected ICorrelationIdHelper CorrelationIdHelper { get; set; }

		protected ILogger Logger { get; private set; }

		public UserService(ICommandSender<Cqrs.Authentication.ISingleSignOnToken> commandSender, IUnitOfWorkService unitOfWorkService, IQueryFactory queryFactory, IAuthenticationTokenHelper<Cqrs.Authentication.ISingleSignOnToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, IUserRepository userRepository, ILogger logger)
		{
			CommandSender = commandSender;
			UnitOfWorkService = unitOfWorkService;
			QueryFactory = queryFactory;
			AuthenticationTokenHelper = authenticationTokenHelper;
			CorrelationIdHelper = correlationIdHelper;
			UserRepository = userRepository;
			Logger = logger;
		}

		/// <summary>
		/// Create a new instance of the <see cref="Entities.UserEntity"/>
		/// </summary>
		public IServiceResponseWithResultData<Entities.UserEntity> CreateUser(IServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, Entities.UserEntity> serviceRequest)
		{
			AuthenticationTokenHelper.SetAuthenticationToken(serviceRequest.AuthenticationToken);
			CorrelationIdHelper.SetCorrelationId(serviceRequest.CorrelationId);
			UnitOfWorkService.SetCommitter(this);
			Entities.UserEntity item = serviceRequest.Data;
			if (item.Rsn == Guid.Empty)
				item.Rsn = Guid.NewGuid();

			var command = new CreateUserCommand(item.Rsn);
			OnCreateUser(serviceRequest, command);
			CommandSender.Send(command);
			OnCreatedUser(serviceRequest, command);

			UnitOfWorkService.Commit(this);
			return CompleteResponse(new ServiceResponseWithResultData<Entities.UserEntity>(item));
		}

		partial void OnCreateUser(IServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, Entities.UserEntity> serviceRequest, CreateUserCommand command);

		partial void OnCreatedUser(IServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, Entities.UserEntity> serviceRequest, CreateUserCommand command);

		/// <summary>
		/// Update an existing instance of the <see cref="Entities.UserEntity"/>
		/// </summary>
		public IServiceResponseWithResultData<Entities.UserEntity> UpdateUser(IServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, Entities.UserEntity> serviceRequest)
		{
			AuthenticationTokenHelper.SetAuthenticationToken(serviceRequest.AuthenticationToken);
			CorrelationIdHelper.SetCorrelationId(serviceRequest.CorrelationId);
			UnitOfWorkService.SetCommitter(this);
			Entities.UserEntity item = serviceRequest.Data;

			var locatedItem = UserRepository.Load(item.Rsn);
			if (locatedItem == null)
				return CompleteResponse(new ServiceResponseWithResultData<Entities.UserEntity> { State = ServiceResponseStateType.FailedValidation });

			var command = new UpdateUserCommand(item.Rsn);
			ServiceResponseStateType? serviceResponseStateType = null;
			OnUpdateUser(serviceRequest, ref command, locatedItem, ref serviceResponseStateType);
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponseWithResultData<Entities.UserEntity> { State = serviceResponseStateType.Value });

			CommandSender.Send(command);
			OnUpdatedUser(serviceRequest, ref command, locatedItem, ref serviceResponseStateType);
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponseWithResultData<Entities.UserEntity> { State = serviceResponseStateType.Value });

			UnitOfWorkService.Commit(this);
			return CompleteResponse(new ServiceResponseWithResultData<Entities.UserEntity>(item));
		}

		partial void OnUpdateUser(IServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, Entities.UserEntity> serviceRequest, ref UpdateUserCommand command, Entities.UserEntity locatedItem, ref ServiceResponseStateType? serviceResponseStateType);

		partial void OnUpdatedUser(IServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, Entities.UserEntity> serviceRequest, ref UpdateUserCommand command, Entities.UserEntity locatedItem, ref ServiceResponseStateType? serviceResponseStateType);

		/// <summary>
		/// Logically delete an existing instance of the <see cref="Entities.UserEntity"/>
		/// </summary>
		public IServiceResponse DeleteUser(IServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, Entities.UserEntity> serviceRequest)
		{
			AuthenticationTokenHelper.SetAuthenticationToken(serviceRequest.AuthenticationToken);
			CorrelationIdHelper.SetCorrelationId(serviceRequest.CorrelationId);
			UnitOfWorkService.SetCommitter(this);
			Entities.UserEntity item = serviceRequest.Data;

			var locatedItem = UserRepository.Load(item.Rsn, false);
			if (locatedItem == null)
				return CompleteResponse(new ServiceResponseWithResultData<Entities.UserEntity> { State = ServiceResponseStateType.FailedValidation });

			if (locatedItem.IsLogicallyDeleted)
				return CompleteResponse(new ServiceResponseWithResultData<Entities.UserEntity> { State = ServiceResponseStateType.FailedValidation });

			var command = new DeleteUserCommand(item.Rsn);
			ServiceResponseStateType? serviceResponseStateType = null;
			OnDeleteUser(serviceRequest, ref command, locatedItem, ref serviceResponseStateType);
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponseWithResultData<Entities.UserEntity> { State = serviceResponseStateType.Value });

			CommandSender.Send(command);
			OnDeletedUser(serviceRequest, ref command, locatedItem, ref serviceResponseStateType);
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponseWithResultData<Entities.UserEntity> { State = serviceResponseStateType.Value });

			UnitOfWorkService.Commit(this);
			return CompleteResponse(new ServiceResponse());
		}

		partial void OnDeleteUser(IServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, Entities.UserEntity> serviceRequest, ref DeleteUserCommand command, Entities.UserEntity locatedItem, ref ServiceResponseStateType? serviceResponseStateType);

		partial void OnDeletedUser(IServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, Entities.UserEntity> serviceRequest, ref DeleteUserCommand command, Entities.UserEntity locatedItem, ref ServiceResponseStateType? serviceResponseStateType);

		protected virtual TServiceResponse CompleteResponse<TServiceResponse>(TServiceResponse serviceResponse)
			where TServiceResponse : IServiceResponse
		{
			serviceResponse.CorrelationId = CorrelationIdHelper.GetCorrelationId();
			return serviceResponse;
		}
	}
}
