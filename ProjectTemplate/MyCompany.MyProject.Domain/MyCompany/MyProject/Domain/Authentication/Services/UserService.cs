//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Copyright
// -----------------------------------------------------------------------
// <copyright company="cdmdotnet Limited">
//     Copyright cdmdotnet Limited. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------
#endregion
using Cqrs.Domain;
using MyCompany.MyProject.Domain.Authentication.Entities;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using Cqrs.Commands;
using Cqrs.Authentication;
using Cqrs.Repositories.Queries;
using Cqrs.Services;
using MyCompany.MyProject.Domain.Authentication.Repositories;
using MyCompany.MyProject.Domain.Authentication.Repositories.Queries.Strategies;

namespace MyCompany.MyProject.Domain.Authentication.Services
{
	public partial class UserService 
	{
		partial void OnGetAll(IServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, UserServiceGetAllParameters> serviceRequest, ref IServiceResponseWithResultData<IEnumerable<Entities.UserEntity>> results)
		{
			// Define Query
			ICollectionResultQuery<UserQueryStrategy, Entities.UserEntity> query = QueryFactory.CreateNewCollectionResultQuery<UserQueryStrategy, Entities.UserEntity>();

			// Retrieve Data, but remember if no items exist, the value is null
			query = UserRepository.Retrieve(query);
			IEnumerable<Entities.UserEntity> inventoryItems = query.Result;

			results = new ServiceResponseWithResultData<IEnumerable<Entities.UserEntity>>(inventoryItems);
		}

		partial void OnGetByRsn(IServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, UserServiceGetByRsnParameters> serviceRequest, ref IServiceResponseWithResultData<Entities.UserEntity> results)
		{
			// Define Query
			ISingleResultQuery<UserQueryStrategy, Entities.UserEntity> query = QueryFactory.CreateNewSingleResultQuery<UserQueryStrategy, Entities.UserEntity>();
			query.QueryStrategy.WithRsn(serviceRequest.Data.rsn);

			// Retrieve Data, but remember if no items exist, the value is null
			query = UserRepository.Retrieve(query);
			Entities.UserEntity user = query.Result;

			results = new ServiceResponseWithResultData<Entities.UserEntity>(user);
		}
	}
}
