//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Copyright
// -----------------------------------------------------------------------
// <copyright company="cdmdotnet Limited">
//     Copyright cdmdotnet Limited. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------
#endregion
using Cqrs.Domain;
using MyCompany.MyProject.Domain.Inventory.Entities;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.Xml;
using Cqrs.Services;

namespace MyCompany.MyProject.Domain.Inventory.Services
{

	/// <summary>
	/// A <see cref="DataContractResolver"/> for using <see cref="IInventoryItemService.GetAll"/> via WCF
	/// </summary>
	[GeneratedCode("CQRS UML Code Generator", "1.601.786")]
	public partial class InventoryItemServiceGetAllResolver : ServiceParameterResolver<IInventoryItemService, Cqrs.Authentication.ISingleSignOnToken>
	{
		public InventoryItemServiceGetAllResolver(ISingleSignOnTokenResolver singleSignOnTokenResolver)
			: base(singleSignOnTokenResolver)
		{
		}

		public InventoryItemServiceGetAllResolver()
			: base(new Cqrs.Authentication.SingleSignOnTokenResolver())
		{
		}

		public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
		{
			if (dataContractType == typeof(ServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, InventoryItemServiceGetAllParameters>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("InventoryItemServiceGetAll");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			if (dataContractType == typeof(ServiceResponseWithResultData<IEnumerable<Entities.InventoryItemSummaryEntity>>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("InventoryItemServiceGetAllResponse");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			return base.TryResolveType(dataContractType, declaredType, knownTypeResolver, out typeName, out typeNamespace);
		}

		protected override bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace)
		{
			bool result = false;
			TryResolveUnResolvedType(dataContractType, declaredType, knownTypeResolver, ref typeName, ref typeNamespace, ref result);
			return result;
		}

		partial void TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace, ref bool result);

		/// <summary>
		/// Override this method to map the specified xsi:type name and namespace to a data contract type during deserialization.
		/// </summary>
		/// <returns>
		/// The type the xsi:type name and namespace is mapped to. 
		/// </returns>
		/// <param name="typeName">The xsi:type name to map.</param><param name="typeNamespace">The xsi:type namespace to map.</param><param name="declaredType">The type declared in the data contract.</param><param name="knownTypeResolver">The known type resolver.</param>
		public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			if (typeNamespace == ServiceNamespace)
			{
				if (typeName == "InventoryItemServiceGetAll")
					return typeof(ServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, InventoryItemServiceGetAllParameters>);
			}

				if (typeName == "InventoryItemServiceGetAllResponse")
					return typeof(ServiceResponseWithResultData<IEnumerable<Entities.InventoryItemSummaryEntity>>);

			return base.ResolveName(typeName, typeNamespace, declaredType, knownTypeResolver);
		}

		protected override Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			Type result = null;
			ResolveUnResolvedName(typeName, typeNamespace, declaredType, knownTypeResolver, ref result);
			return result;
		}

		partial void ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver, ref Type result);

		public static void RegisterDataContracts()
		{
			WcfDataContractResolverConfiguration.Current.RegisterDataContract<IInventoryItemService, InventoryItemServiceGetAllResolver>("GetAll");
		}
	}


	/// <summary>
	/// A <see cref="DataContractResolver"/> for using <see cref="IInventoryItemService.GetByRsn"/> via WCF
	/// </summary>
	[GeneratedCode("CQRS UML Code Generator", "1.601.786")]
	public partial class InventoryItemServiceGetByRsnResolver : ServiceParameterResolver<IInventoryItemService, Cqrs.Authentication.ISingleSignOnToken>
	{
		public InventoryItemServiceGetByRsnResolver(ISingleSignOnTokenResolver singleSignOnTokenResolver)
			: base(singleSignOnTokenResolver)
		{
		}

		public InventoryItemServiceGetByRsnResolver()
			: base(new Cqrs.Authentication.SingleSignOnTokenResolver())
		{
		}

		public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
		{
			if (dataContractType == typeof(ServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, InventoryItemServiceGetByRsnParameters>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("InventoryItemServiceGetByRsn");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			if (dataContractType == typeof(ServiceResponseWithResultData<Entities.InventoryItemEntity>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("InventoryItemServiceGetByRsnResponse");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			return base.TryResolveType(dataContractType, declaredType, knownTypeResolver, out typeName, out typeNamespace);
		}

		protected override bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace)
		{
			bool result = false;
			TryResolveUnResolvedType(dataContractType, declaredType, knownTypeResolver, ref typeName, ref typeNamespace, ref result);
			return result;
		}

		partial void TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace, ref bool result);

		/// <summary>
		/// Override this method to map the specified xsi:type name and namespace to a data contract type during deserialization.
		/// </summary>
		/// <returns>
		/// The type the xsi:type name and namespace is mapped to. 
		/// </returns>
		/// <param name="typeName">The xsi:type name to map.</param><param name="typeNamespace">The xsi:type namespace to map.</param><param name="declaredType">The type declared in the data contract.</param><param name="knownTypeResolver">The known type resolver.</param>
		public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			if (typeNamespace == ServiceNamespace)
			{
				if (typeName == "InventoryItemServiceGetByRsn")
					return typeof(ServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, InventoryItemServiceGetByRsnParameters>);
			}

				if (typeName == "InventoryItemServiceGetByRsnResponse")
					return typeof(ServiceResponseWithResultData<Entities.InventoryItemEntity>);

			return base.ResolveName(typeName, typeNamespace, declaredType, knownTypeResolver);
		}

		protected override Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			Type result = null;
			ResolveUnResolvedName(typeName, typeNamespace, declaredType, knownTypeResolver, ref result);
			return result;
		}

		partial void ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver, ref Type result);

		public static void RegisterDataContracts()
		{
			WcfDataContractResolverConfiguration.Current.RegisterDataContract<IInventoryItemService, InventoryItemServiceGetByRsnResolver>("GetByRsn");
		}
	}


	/// <summary>
	/// A <see cref="DataContractResolver"/> for using <see cref="IInventoryItemService.ChangeName"/> via WCF
	/// </summary>
	[GeneratedCode("CQRS UML Code Generator", "1.601.786")]
	public partial class InventoryItemServiceChangeNameResolver : ServiceParameterResolver<IInventoryItemService, Cqrs.Authentication.ISingleSignOnToken>
	{
		public InventoryItemServiceChangeNameResolver(ISingleSignOnTokenResolver singleSignOnTokenResolver)
			: base(singleSignOnTokenResolver)
		{
		}

		public InventoryItemServiceChangeNameResolver()
			: base(new Cqrs.Authentication.SingleSignOnTokenResolver())
		{
		}

		public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
		{
			if (dataContractType == typeof(ServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, InventoryItemServiceChangeNameParameters>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("InventoryItemServiceChangeName");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			return base.TryResolveType(dataContractType, declaredType, knownTypeResolver, out typeName, out typeNamespace);
		}

		protected override bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace)
		{
			bool result = false;
			TryResolveUnResolvedType(dataContractType, declaredType, knownTypeResolver, ref typeName, ref typeNamespace, ref result);
			return result;
		}

		partial void TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace, ref bool result);

		/// <summary>
		/// Override this method to map the specified xsi:type name and namespace to a data contract type during deserialization.
		/// </summary>
		/// <returns>
		/// The type the xsi:type name and namespace is mapped to. 
		/// </returns>
		/// <param name="typeName">The xsi:type name to map.</param><param name="typeNamespace">The xsi:type namespace to map.</param><param name="declaredType">The type declared in the data contract.</param><param name="knownTypeResolver">The known type resolver.</param>
		public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			if (typeNamespace == ServiceNamespace)
			{
				if (typeName == "InventoryItemServiceChangeName")
					return typeof(ServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, InventoryItemServiceChangeNameParameters>);
			}

			return base.ResolveName(typeName, typeNamespace, declaredType, knownTypeResolver);
		}

		protected override Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			Type result = null;
			ResolveUnResolvedName(typeName, typeNamespace, declaredType, knownTypeResolver, ref result);
			return result;
		}

		partial void ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver, ref Type result);

		public static void RegisterDataContracts()
		{
			WcfDataContractResolverConfiguration.Current.RegisterDataContract<IInventoryItemService, InventoryItemServiceChangeNameResolver>("ChangeName");
		}
	}


	/// <summary>
	/// A <see cref="DataContractResolver"/> for using <see cref="IInventoryItemService.CheckIn"/> via WCF
	/// </summary>
	[GeneratedCode("CQRS UML Code Generator", "1.601.786")]
	public partial class InventoryItemServiceCheckInResolver : ServiceParameterResolver<IInventoryItemService, Cqrs.Authentication.ISingleSignOnToken>
	{
		public InventoryItemServiceCheckInResolver(ISingleSignOnTokenResolver singleSignOnTokenResolver)
			: base(singleSignOnTokenResolver)
		{
		}

		public InventoryItemServiceCheckInResolver()
			: base(new Cqrs.Authentication.SingleSignOnTokenResolver())
		{
		}

		public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
		{
			if (dataContractType == typeof(ServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, InventoryItemServiceCheckInParameters>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("InventoryItemServiceCheckIn");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			return base.TryResolveType(dataContractType, declaredType, knownTypeResolver, out typeName, out typeNamespace);
		}

		protected override bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace)
		{
			bool result = false;
			TryResolveUnResolvedType(dataContractType, declaredType, knownTypeResolver, ref typeName, ref typeNamespace, ref result);
			return result;
		}

		partial void TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace, ref bool result);

		/// <summary>
		/// Override this method to map the specified xsi:type name and namespace to a data contract type during deserialization.
		/// </summary>
		/// <returns>
		/// The type the xsi:type name and namespace is mapped to. 
		/// </returns>
		/// <param name="typeName">The xsi:type name to map.</param><param name="typeNamespace">The xsi:type namespace to map.</param><param name="declaredType">The type declared in the data contract.</param><param name="knownTypeResolver">The known type resolver.</param>
		public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			if (typeNamespace == ServiceNamespace)
			{
				if (typeName == "InventoryItemServiceCheckIn")
					return typeof(ServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, InventoryItemServiceCheckInParameters>);
			}

			return base.ResolveName(typeName, typeNamespace, declaredType, knownTypeResolver);
		}

		protected override Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			Type result = null;
			ResolveUnResolvedName(typeName, typeNamespace, declaredType, knownTypeResolver, ref result);
			return result;
		}

		partial void ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver, ref Type result);

		public static void RegisterDataContracts()
		{
			WcfDataContractResolverConfiguration.Current.RegisterDataContract<IInventoryItemService, InventoryItemServiceCheckInResolver>("CheckIn");
		}
	}


	/// <summary>
	/// A <see cref="DataContractResolver"/> for using <see cref="IInventoryItemService.Create"/> via WCF
	/// </summary>
	[GeneratedCode("CQRS UML Code Generator", "1.601.786")]
	public partial class InventoryItemServiceCreateResolver : ServiceParameterResolver<IInventoryItemService, Cqrs.Authentication.ISingleSignOnToken>
	{
		public InventoryItemServiceCreateResolver(ISingleSignOnTokenResolver singleSignOnTokenResolver)
			: base(singleSignOnTokenResolver)
		{
		}

		public InventoryItemServiceCreateResolver()
			: base(new Cqrs.Authentication.SingleSignOnTokenResolver())
		{
		}

		public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
		{
			if (dataContractType == typeof(ServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, InventoryItemServiceCreateParameters>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("InventoryItemServiceCreate");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			return base.TryResolveType(dataContractType, declaredType, knownTypeResolver, out typeName, out typeNamespace);
		}

		protected override bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace)
		{
			bool result = false;
			TryResolveUnResolvedType(dataContractType, declaredType, knownTypeResolver, ref typeName, ref typeNamespace, ref result);
			return result;
		}

		partial void TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace, ref bool result);

		/// <summary>
		/// Override this method to map the specified xsi:type name and namespace to a data contract type during deserialization.
		/// </summary>
		/// <returns>
		/// The type the xsi:type name and namespace is mapped to. 
		/// </returns>
		/// <param name="typeName">The xsi:type name to map.</param><param name="typeNamespace">The xsi:type namespace to map.</param><param name="declaredType">The type declared in the data contract.</param><param name="knownTypeResolver">The known type resolver.</param>
		public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			if (typeNamespace == ServiceNamespace)
			{
				if (typeName == "InventoryItemServiceCreate")
					return typeof(ServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, InventoryItemServiceCreateParameters>);
			}

			return base.ResolveName(typeName, typeNamespace, declaredType, knownTypeResolver);
		}

		protected override Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			Type result = null;
			ResolveUnResolvedName(typeName, typeNamespace, declaredType, knownTypeResolver, ref result);
			return result;
		}

		partial void ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver, ref Type result);

		public static void RegisterDataContracts()
		{
			WcfDataContractResolverConfiguration.Current.RegisterDataContract<IInventoryItemService, InventoryItemServiceCreateResolver>("Create");
		}
	}


	/// <summary>
	/// A <see cref="DataContractResolver"/> for using <see cref="IInventoryItemService.Deactivate"/> via WCF
	/// </summary>
	[GeneratedCode("CQRS UML Code Generator", "1.601.786")]
	public partial class InventoryItemServiceDeactivateResolver : ServiceParameterResolver<IInventoryItemService, Cqrs.Authentication.ISingleSignOnToken>
	{
		public InventoryItemServiceDeactivateResolver(ISingleSignOnTokenResolver singleSignOnTokenResolver)
			: base(singleSignOnTokenResolver)
		{
		}

		public InventoryItemServiceDeactivateResolver()
			: base(new Cqrs.Authentication.SingleSignOnTokenResolver())
		{
		}

		public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
		{
			if (dataContractType == typeof(ServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, InventoryItemServiceDeactivateParameters>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("InventoryItemServiceDeactivate");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			return base.TryResolveType(dataContractType, declaredType, knownTypeResolver, out typeName, out typeNamespace);
		}

		protected override bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace)
		{
			bool result = false;
			TryResolveUnResolvedType(dataContractType, declaredType, knownTypeResolver, ref typeName, ref typeNamespace, ref result);
			return result;
		}

		partial void TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace, ref bool result);

		/// <summary>
		/// Override this method to map the specified xsi:type name and namespace to a data contract type during deserialization.
		/// </summary>
		/// <returns>
		/// The type the xsi:type name and namespace is mapped to. 
		/// </returns>
		/// <param name="typeName">The xsi:type name to map.</param><param name="typeNamespace">The xsi:type namespace to map.</param><param name="declaredType">The type declared in the data contract.</param><param name="knownTypeResolver">The known type resolver.</param>
		public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			if (typeNamespace == ServiceNamespace)
			{
				if (typeName == "InventoryItemServiceDeactivate")
					return typeof(ServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, InventoryItemServiceDeactivateParameters>);
			}

			return base.ResolveName(typeName, typeNamespace, declaredType, knownTypeResolver);
		}

		protected override Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			Type result = null;
			ResolveUnResolvedName(typeName, typeNamespace, declaredType, knownTypeResolver, ref result);
			return result;
		}

		partial void ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver, ref Type result);

		public static void RegisterDataContracts()
		{
			WcfDataContractResolverConfiguration.Current.RegisterDataContract<IInventoryItemService, InventoryItemServiceDeactivateResolver>("Deactivate");
		}
	}


	/// <summary>
	/// A <see cref="DataContractResolver"/> for using <see cref="IInventoryItemService.Remove"/> via WCF
	/// </summary>
	[GeneratedCode("CQRS UML Code Generator", "1.601.786")]
	public partial class InventoryItemServiceRemoveResolver : ServiceParameterResolver<IInventoryItemService, Cqrs.Authentication.ISingleSignOnToken>
	{
		public InventoryItemServiceRemoveResolver(ISingleSignOnTokenResolver singleSignOnTokenResolver)
			: base(singleSignOnTokenResolver)
		{
		}

		public InventoryItemServiceRemoveResolver()
			: base(new Cqrs.Authentication.SingleSignOnTokenResolver())
		{
		}

		public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
		{
			if (dataContractType == typeof(ServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, InventoryItemServiceRemoveParameters>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("InventoryItemServiceRemove");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			return base.TryResolveType(dataContractType, declaredType, knownTypeResolver, out typeName, out typeNamespace);
		}

		protected override bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace)
		{
			bool result = false;
			TryResolveUnResolvedType(dataContractType, declaredType, knownTypeResolver, ref typeName, ref typeNamespace, ref result);
			return result;
		}

		partial void TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace, ref bool result);

		/// <summary>
		/// Override this method to map the specified xsi:type name and namespace to a data contract type during deserialization.
		/// </summary>
		/// <returns>
		/// The type the xsi:type name and namespace is mapped to. 
		/// </returns>
		/// <param name="typeName">The xsi:type name to map.</param><param name="typeNamespace">The xsi:type namespace to map.</param><param name="declaredType">The type declared in the data contract.</param><param name="knownTypeResolver">The known type resolver.</param>
		public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			if (typeNamespace == ServiceNamespace)
			{
				if (typeName == "InventoryItemServiceRemove")
					return typeof(ServiceRequestWithData<Cqrs.Authentication.ISingleSignOnToken, InventoryItemServiceRemoveParameters>);
			}

			return base.ResolveName(typeName, typeNamespace, declaredType, knownTypeResolver);
		}

		protected override Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			Type result = null;
			ResolveUnResolvedName(typeName, typeNamespace, declaredType, knownTypeResolver, ref result);
			return result;
		}

		partial void ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver, ref Type result);

		public static void RegisterDataContracts()
		{
			WcfDataContractResolverConfiguration.Current.RegisterDataContract<IInventoryItemService, InventoryItemServiceRemoveResolver>("Remove");
		}
	}

}
