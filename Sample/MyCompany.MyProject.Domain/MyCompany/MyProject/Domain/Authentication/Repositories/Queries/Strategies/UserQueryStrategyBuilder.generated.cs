//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Copyright
// -----------------------------------------------------------------------
// <copyright company="cdmdotnet Limited">
//     Copyright cdmdotnet Limited. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------
#endregion
using Cqrs.Domain;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using Cqrs.Configuration;
using Cqrs.Authentication;
using Cqrs.Repositories.Queries;
using MyCompany.MyProject.Domain.Factories;

namespace MyCompany.MyProject.Domain.Authentication.Repositories.Queries.Strategies
{
	[GeneratedCode("CQRS UML Code Generator", "1.500.480.367")]
	public partial class UserQueryStrategyBuilder : QueryBuilder<UserQueryStrategy, Entities.UserEntity>, IUserQueryStrategyBuilder
	{
		public UserQueryStrategyBuilder(IDomainDataStoreFactory dataStoreFactory, IDependencyResolver dependencyResolver)
			: base(dataStoreFactory.GetUserDataStore(), dependencyResolver)
		{
		}

		#region Overrides of QueryBuilder<UserQueryStrategy,Entities.UserEntity>

		protected override IQueryable<Entities.UserEntity> GeneratePredicate(QueryPredicate queryPredicate, IQueryable<Entities.UserEntity> leftHandQueryable = null)
		{
			UserQueryStrategy queryStrategy = GetNullQueryStrategy();
			SortedSet<QueryParameter> parameters = queryPredicate.Parameters;

			IQueryable<Entities.UserEntity> resultingQueryable = null;

			resultingQueryable
				= GeneratePredicateWithPermissionScopeAny<ISingleSignOnToken>(queryPredicate, leftHandQueryable)
				?? GeneratePredicateWithPermissionScopeUser<ISingleSignOnToken>(queryPredicate, leftHandQueryable)
				?? GeneratePredicateWithPermissionScopeCompany<ISingleSignOnToken>(queryPredicate, leftHandQueryable)
				?? GeneratePredicateWithPermissionScopeCompanyAndUser<ISingleSignOnToken>(queryPredicate, leftHandQueryable);

			if (resultingQueryable != null)
				return resultingQueryable;

			throw new InvalidOperationException("No known predicate could be generated.");
		}

		#endregion

		protected override void ApplySorting(UserQueryStrategy queryStrategy, ref IQueryable<Entities.UserEntity> queryable)
		{
			var orderQueryable = (IOrderedQueryable<Entities.UserEntity>)queryable;

			int index = 0;
			foreach (Func<int, UserQueryStrategy> sortingMethod in queryStrategy.SortingList)
			{

			}
			queryable = orderQueryable;
		}

	}
}
