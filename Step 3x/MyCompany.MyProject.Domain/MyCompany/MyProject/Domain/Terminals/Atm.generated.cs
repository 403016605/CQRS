//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Copyright
// -----------------------------------------------------------------------
// <copyright company="cdmdotnet Limited">
//     Copyright cdmdotnet Limited. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------
#endregion
using Cqrs.Domain;
using MyCompany.MyProject.Domain.Terminals.Events;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using Cqrs.Configuration;
using cdmdotnet.Logging;
using Cqrs.Snapshots;
using MyCompany.MyProject.Domain.Terminals.Events;

namespace MyCompany.MyProject.Domain.Terminals
{
	[GeneratedCode("CQRS UML Code Generator", "1.601.786")]
	public  partial class Atm : AggregateRoot<Cqrs.Authentication.ISingleSignOnToken>
	{
		public Guid Rsn
		{
			get { return Id; }
			private set { Id = value; }
		}

		public bool IsLogicallyDeleted {get; set;}

		#region Implementation of IMessageWithAuthenticationToken<Cqrs.Authentication.ISingleSignOnToken>

		public Cqrs.Authentication.ISingleSignOnToken AuthenticationToken { get; set; }

		#endregion

		protected IDependencyResolver DependencyResolver { get; private set; }

		protected ILogger Log { get; private set; }

// ReSharper disable UnusedMember.Local
		/// <summary>
		/// A constructor for the <see cref="Cqrs.Domain.Factories.IAggregateFactory"/>
		/// </summary>
		private Atm()
		{

		}

		/// <summary>
		/// A constructor for the <see cref="Cqrs.Domain.Factories.IAggregateFactory"/>
		/// </summary>
		private Atm(IDependencyResolver dependencyResolver, ILogger log)
		{
			DependencyResolver = dependencyResolver;
			Log = log;
		}
// ReSharper restore UnusedMember.Local

		public Atm(IDependencyResolver dependencyResolver, ILogger log, Guid rsn)
		{
			DependencyResolver = dependencyResolver;
			Log = log;
			Rsn = rsn;
		}

		public void WithdrawFunds(double amount)
		{
			Log.LogDebug("Entered", "Atm/WithdrawFunds");

			WithdrawFailedDueAmountLessThanZero withdrawFailedDueAmountLessThanZeroEvent = null;
			WithdrawValidated withdrawValidatedEvent = null;

			OnWithdrawFunds(amount, ref withdrawFailedDueAmountLessThanZeroEvent, ref withdrawValidatedEvent);
			if (withdrawFailedDueAmountLessThanZeroEvent != null)
			{
				Log.LogDebug("Pre", "Atm/WithdrawFunds/ApplyChange/WithdrawFailedDueAmountLessThanZero");
				ApplyChange(withdrawFailedDueAmountLessThanZeroEvent);
				Log.LogDebug("Post", "Atm/WithdrawFunds/ApplyChange/WithdrawFailedDueAmountLessThanZero");
			}
			if (withdrawValidatedEvent != null)
			{
				Log.LogDebug("Pre", "Atm/WithdrawFunds/ApplyChange/WithdrawValidated");
				ApplyChange(withdrawValidatedEvent);
				Log.LogDebug("Post", "Atm/WithdrawFunds/ApplyChange/WithdrawValidated");
			}

			Log.LogDebug("Pre", "Atm/WithdrawFunds/OnWithdrawFundsHandled");
			OnWithdrawFundsHandled(amount);
			Log.LogDebug("Post", "Atm/WithdrawFunds/OnWithdrawFundsHandled");

			Log.LogDebug("Exited", "Atm/WithdrawFunds");
		}

		partial void OnWithdrawFunds(double amount, ref WithdrawFailedDueAmountLessThanZero withdrawFailedDueAmountLessThanZeroEvent, ref WithdrawValidated withdrawValidatedEvent);

		partial void OnWithdrawFundsHandled(double amount);


		public class AtmSnapshot : Snapshot
		{
			public bool IsLogicallyDeleted {get; set;}
		}
	}
}
