//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Copyright
// -----------------------------------------------------------------------
// <copyright company="cdmdotnet Limited">
//     Copyright cdmdotnet Limited. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------
#endregion
using Cqrs.Domain;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using Cqrs.Commands;
using Cqrs.Configuration;
using Cqrs.Domain;
using Cqrs.Domain.Exceptions;
using Cqrs.Events;
using cdmdotnet.Logging;

namespace MyCompany.MyProject.Domain.Terminals.Commands.Handlers
{
	[GeneratedCode("CQRS UML Code Generator", "1.601.786")]
	public  partial class WithdrawFundsFromAtmCommandHandler
		
		: ICommandHandler<Cqrs.Authentication.ISingleSignOnToken, WithdrawFundsFromAtmCommand>
	{
		protected IUnitOfWork<Cqrs.Authentication.ISingleSignOnToken> UnitOfWork { get; private set; }

		protected IDependencyResolver DependencyResolver { get; private set; }

		protected ILogger Logger { get; private set; }

		public WithdrawFundsFromAtmCommandHandler(IUnitOfWork<Cqrs.Authentication.ISingleSignOnToken> unitOfWork, IDependencyResolver dependencyResolver, ILogger logger)
		{
			UnitOfWork = unitOfWork;
			DependencyResolver = dependencyResolver;
			Logger = logger;
		}

		public double Amount { get; set; }


		#region Implementation of ICommandHandler<in WithdrawFundsFromAtm>

		public void Handle(WithdrawFundsFromAtmCommand command)
		{
			ICommandValidator<Cqrs.Authentication.ISingleSignOnToken, WithdrawFundsFromAtmCommand> commandValidator = null;
			try
			{
				commandValidator = DependencyResolver.Resolve<ICommandValidator<Cqrs.Authentication.ISingleSignOnToken, WithdrawFundsFromAtmCommand>>();
			}
			catch (Exception exception)
			{
				Logger.LogDebug("Locating an ICommandValidator failed.", "WithdrawFundsFromAtmCommandHandler\\Handle(WithdrawFundsFromAtmCommand)", exception);
			}

			if (commandValidator != null && !commandValidator.IsCommandValid(command))
			{
				Logger.LogInfo("The provided command is not valid.", "WithdrawFundsFromAtmCommandHandler\\Handle(WithdrawFundsFromAtmCommand)");
				return;
			}

			bool continueExecution = true;
			OnHandle(command, ref continueExecution);
			if (continueExecution)
			{
				Atm item = null;
				OnWithdrawFunds(command, ref item);
				if (item == null)
				{
					item = new Atm(DependencyResolver, Logger, command.Rsn);
					UnitOfWork.Add(item);
				}
				item.WithdrawFunds(command.Amount);
				OnWithdrawFundsHandled(command, item);
				OnAddToUnitOfWork(command, item);
				UnitOfWork.Add(item);
				OnAddedToUnitOfWork(command, item);
				OnCommit(command, item);
				UnitOfWork.Commit();
				OnCommited(command, item);
			}
		}

		#endregion

		partial void OnHandle(WithdrawFundsFromAtmCommand command, ref bool continueExecution);

		partial void OnWithdrawFunds(WithdrawFundsFromAtmCommand command, ref Atm item);

		partial void OnWithdrawFundsHandled(WithdrawFundsFromAtmCommand command, Atm item);

		partial void OnAddToUnitOfWork(WithdrawFundsFromAtmCommand command, Atm item);

		partial void OnAddedToUnitOfWork(WithdrawFundsFromAtmCommand command, Atm item);

		partial void OnCommit(WithdrawFundsFromAtmCommand command, Atm item);

		partial void OnCommited(WithdrawFundsFromAtmCommand command, Atm item);
	}
}
